import type { NextPage } from 'next';
import { useEffect, useState } from 'react';
import Head from 'next/head';
import ReactECharts from 'echarts-for-react';

import styles from '../styles/Home.module.css';
import { Answer, Gender, Role } from '../types/Answer';
import { Questions as q } from '../constants/questions';
import { EChartsOption } from 'echarts-for-react/lib/types';

interface Props {
  data: Array<Answer>;
}

const Home: NextPage<Props> = ({ data }) => {
  const roles: Array<Role> = Array.from(
    new Set(data.map((answer) => answer[q.currentRole]))
  );
  const [currentRole, setCurrentRole] = useState<Role>(
    'Desarrollador Front-end'
  );
  const initialData = data.filter(
    (answer) => answer[q.currentRole] === currentRole
  );
  const [filteredData, setFilteredData] = useState(initialData);
  const filterByGender = (gender: Gender) =>
    filteredData!.filter((answer: Answer) => answer[q.gender] === gender);
  const men = filterByGender('Hombre');
  const women = filterByGender('Mujer');
  const other = filterByGender('Otro');
  const orderedByAge = (answers: Array<Answer>) => {
    const ranges = Array.from(
      new Set(answers.map((answer) => answer[q.ageRange]))
    );
    return Object.assign(
      ranges.map((range) => {
        return {
          [range]: answers.filter((answer) => answer[q.ageRange] === range),
        };
      }),
      {}
    );
  };
  const [chartOptions, setChartOptions] = useState();

  const changeRole = (role: string) => {
    setFilteredData(data.filter((answer) => answer[q.currentRole] === role));
  };
  const updatedChart = () => {
    const data = [
      { value: men.length, name: 'Hombres' },
      { value: women.length, name: 'Mujeres' },
    ];
    if (other.length) {
      data.push({ value: other.length, name: 'Otro' });
    }
    return {
      tooltip: {
        trigger: 'item',
      },
      legend: {
        orient: 'vertical',
        left: 'left',
      },
      series: [
        {
          type: 'pie',
          radius: '50%',
          data,
        },
      ],
    };
  };

  useEffect(() => {
    setChartOptions(updatedChart);
  }, [currentRole]);

  return (
    <div className={styles.container}>
      <Head>
        <title>{'DevsChile Sueldos Tech Poll >> Insights'}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {roles.map((role) => (
          <button
            key={role}
            className={role === currentRole ? 'active' : ''}
            onClick={() => {
              changeRole(role);
              setCurrentRole(role);
            }}
          >
            {role}
          </button>
        ))}
        <div>Tenemos {data.length} respuestas totales.</div>
        <div>
          De estas, {filteredData.length} son <code>{currentRole}</code>.
        </div>
        <div>
          De estos, {men.length} son hombres, {women.length} son mujeres
          {other.length ? (
            <span>
              &nbsp;y {other.length} se identifica{other.length > 1 ? 'n' : ''}{' '}
              con <code>Otro</code>
            </span>
          ) : null}
          .
        </div>
        <div>
          {orderedByAge(filteredData).map((answer, index) => (
            <div key={index}>
              Para el rango {Object.keys(orderedByAge(filteredData)[index])} hay{' '}
              {orderedByAge(filteredData)[index][Object.keys(answer)[0]].length}{' '}
              personas.
            </div>
          ))}
          {chartOptions && <ReactECharts option={chartOptions} />}
        </div>
      </main>

      <footer className={styles.footer}></footer>
    </div>
  );
};

export default Home;
export async function getServerSideProps() {
  const frontURL = new URL(
    '/api/answers',
    process.env.NEXT_PUBLIC_SERVER_URL as string
  ).href;
  const response = await fetch(frontURL);
  const data: Array<Answer> = await response.json();

  return {
    props: {
      data,
    },
  };
}
