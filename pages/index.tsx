import type { NextPage } from 'next';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { EChartsOption } from 'echarts-for-react/lib/types';

import Charts from '../components/Charts';
import { Answer, Role } from '../types/Answer';
import { Questions as q } from '../constants/questions';
import styles from '../styles/Home.module.css';
import { useGenders } from '../hooks/useGenders';

interface Props {
  data: Array<Answer>;
}

const Home: NextPage<Props> = ({ data }) => {
  const roles: Array<Role> = Array.from(
    new Set(data.map((answer) => answer[q.currentRole]))
  );
  const [currentRole, setCurrentRole] = useState<Role>(
    'Desarrollador Front-end'
  );
  const initialData = data.filter(
    (answer) => answer[q.currentRole] === currentRole
  );
  const [filteredData, setFilteredData] = useState(initialData);
  const { men, women, other } = useGenders(filteredData);

  const [genderChartOptions, setGenderChartOptions] = useState<EChartsOption>();
  const [ageChartOptions, setAgeChartOptions] = useState<EChartsOption>();

  const changeRole = (role: string) =>
    setFilteredData(data.filter((answer) => answer[q.currentRole] === role));

  const updatedGenderChart = () => {
    const data = [
      { value: men.length, name: 'Hombres' },
      { value: women.length, name: 'Mujeres' },
    ];
    if (other.length) {
      data.push({ value: other.length, name: 'Otro' });
    }
    return {
      tooltip: {
        trigger: 'item',
      },
      legend: {
        orient: 'vertical',
        left: 'left',
      },
      series: [
        {
          type: 'pie',
          radius: '50%',
          data,
        },
      ],
    };
  };
  const updatedAgeChart = () => {
    const orderedByAge = (answers: Array<Answer>) => {
      const ranges = Array.from(
        new Set(answers.map((answer) => answer[q.ageRange]))
      );
      return Object.assign(
        ranges.map((range) => {
          return {
            [range]: answers.filter((answer) => answer[q.ageRange] === range),
          };
        }),
        {}
      );
    };
    const data = orderedByAge(filteredData).map((answer, index) => ({
      name: Object.keys(orderedByAge(filteredData)[index])[0],
      value: orderedByAge(filteredData)[index][Object.keys(answer)[0]].length,
    }));

    return {
      tooltip: {
        trigger: 'item',
      },
      legend: {
        orient: 'vertical',
        left: 'left',
      },
      series: [
        {
          type: 'pie',
          radius: '50%',
          data,
        },
      ],
    };
  };

  useEffect(() => {
    setGenderChartOptions(updatedGenderChart);
    setAgeChartOptions(updatedAgeChart);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentRole]);

  return (
    <div className={styles.container}>
      <Head>
        <title>{'DevsChile Sueldos Tech Salary Poll >> Insights'}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.buttonsRow}>
          {roles.map((role) => (
            <button
              key={role}
              className={role === currentRole ? 'active' : undefined}
              onClick={() => {
                changeRole(role);
                setCurrentRole(role);
              }}
            >
              {role}
            </button>
          ))}
        </div>
        <div>
          Hay {filteredData.length} <code>{currentRole}</code>.
        </div>

        <div style={{ width: '50%' }}>
          <br />
          <br />
          {genderChartOptions && <Charts chartData={genderChartOptions} />}
          {ageChartOptions && <Charts chartData={ageChartOptions} />}
        </div>
      </main>

      <footer className={styles.footer}>
        <small>
          <p>
            Datos recopilados por <a href="//devschile.cl">devschile.cl</a>
          </p>
          <div>Tenemos {data.length} respuestas totales.</div>
        </small>
      </footer>
    </div>
  );
};

export default Home;
export async function getServerSideProps() {
  const frontURL = new URL(
    '/api/answers',
    process.env.NEXT_PUBLIC_SERVER_URL as string
  ).href;
  const response = await fetch(frontURL);
  const data: Array<Answer> = await response.json();

  return {
    props: {
      data,
    },
  };
}
